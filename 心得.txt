1, 一次请求前，添加连接之上的StreamAllocation的引用，请求完成，删除连接之上的StreamAllocation的引用
(计数器，建立好连接后加1，返回结果后减1，标识为空闲)，但是不关闭连接,不关闭底层流(source,sink)放回连接池

2, 下次重用的key是Address实体中的属性host,当然连接池中的connection正在使用(是指allocationLimit=1)
   或者链接已经不能用(是指noNewStreams=true)是再也不能重用的，等待时机remove

3, 同一个时刻对同一个域名的访问并发，这时候连接池是没有缓存的链接

4, 连接初始化在ConnectionInterceptor中, 实例化Realconnection后，立马在连接上添加stream，
标识连接正在使用(注意并非真正与服务器建立了连接，真正建立连接调用socket.connection(address)之后),
并且放入连接池中

5, 连接池(add, remove, cleanup)
ConnectionPool {

    Deque<RealConnection> connections = new ArrayDeque()<>;

    Executorservice servie;// 清理僵尸连接
}

第一，连接池与OkHttpClient实例保持一致，是它的属性，
第二，这个属性deque一致处于多线程环境中，所以锁住类对象
第三，还有两个属性，一个是只有一个线程的线程池，这个线程只能空闲一分钟
另一个是 runnable，执行cleanup清理连接池中的僵尸连接


okhttp {
1, 连接
2, cache
3, http, https, http2.0, spdy
}


总结


1  OKHttpClient (Builder模式, 静态内部类，拥有与外部类同样属性)
1.1  拥有很多的系统组件，也就是成员变量(dispatcher, cache, interceptor ....)
1.2 核心方法就只有一个newCall，call = client.newCall(request);


HTTP的那些事

2 connection (http, https, spdy, http2.0)
2.1 计算资源的MD5值(也可以叫数字摘要，算法有MD5、SHA1、SHA256)，确保资源的没被修改

https : 安全的传输
如何保证安全: 1, 密文 2, 验证身份(证书)  3, 完整性(确保不被篡改,hash算法与md5值)

spdy : 一个连接同时并发多个请求(多路复用), server push(长连接)

http2.0 基于google spdy协议, 添加的是头部压缩,

tunnel 隧道 : 基于http协议建立TCP连接，发送非http协议的数据流量(就是没有标准的请求行，头部，body)

proxy:
代理作用:
CDN : 提供访问速度
抓包 (注意https 443端口号 抓包，需要安装抓包工具的证书，让系统信任才行)
翻墙 : 客户不能直接访问，代理能访问，所以呵呵
防火墙: 所有流量全部经过代理

代理与反向代理

代理: 代理客户端发送请求到目标服务器，隐藏客户端的ip

反向代理 : 代理服务器处理客户端的请求,隐藏目标服务器ip

socket编程不基于任何协议，也就是任何协议都ok,协议自己定制 (dlna，手机控制tv)


"IP地址+端口号"来区分不同的服务的。Web服务、FTP服务


3 okhttp 线程池，任务调度

因为Dispatcher中一个线程池threadpool，三个双向队列Deque<AsyncCall>(不过队列只是一个引用而已)


线程池：
侠义理解: 就是池里有多个线程，任务来了，从池里后去空闲线程去执行，如果没有，new一个线程，
如果线程达到上限，排队等待，等其他任务执行完成后执行


广义: 是因为硬件的提升，CPU处理器多核的出现，减少cpu闲置时间，增加吞吐量，当然线程数量得控制
避免空闲多余线程占内存，线程切换给系统带来压力，okhttp 最大并发64线程


第三方 aar与主项目融合, apk打包流程, SynchronousQueue 的测试


4 拦截器链条(责任链模式,每一个interceptor单一职责,把创建号的对象提供给下一个对象使用)


每个拦截器实现单一功能,


RetryAndFollowUpInterceptor  重试与重定向的逻辑还没测试

线程之间是如何通讯: wait() 与 notify()

5 okio(封装java.io) 以及file system

okio 对java io 的封装

String ---encode编码成(字符集)--> byte[]

byte[] ----decode解码(字符集charset)-----> String

Segment 双向列表

5   cache

http 报文 {
    request line 请求行  header(头部) body(主体)
}

一个key 对应着四个文件  key.0  key.1  key.0.tmp  key.1.tmp

读取的是clean文件,也就是key.0 key.1

写的是dirty, 也就是key.0.tmp  key.1.tmp, 成功后rename clean

目的就是读写分离

threadpool 中一个线程

cleanupRunnable {
  缓存限制，清理缓存 0.75 倍数
}

response header 控制缓存

最重要的连接connection

retrofit 使用 ：

1, 定义api 接口
2, build Retrofit实例,传入 url, json 解析, okhttpclient 单例, 调用create, 反射实例化api接口
实例, 调用接口，产生一个retrofit2.OkhttpCall(包装okhttp.Call)
3, 调用call中execute(), enqueue(), 进入拦截器链条处理call(对一次请求的封装,属性request,okhttpclient)

4, parse(ok_response)返回retrofit.Response对象,可以使用的对象

连接池{threadpool.execute(runnable)}, DiskLruCache{threadpool.execute(runnable)}


retrofit 做的事情

1, jdk动态代理实现你写的接口

2, 对接口函数的解析(注解的解析)

3, 解析okhttp传回来的原始字符串






































